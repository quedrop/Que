<?php
defined('BASEPATH') OR exit('No direct script access allowed');

class Orders extends Admin_Controller
{
	/**
	 * Constructor for the class
	 */
	public function __construct()
	{
		parent::__construct();
		$this->load->model('common_model', 'common');
		$this->load->model('order_model', 'orders');
	}

	/**
	 * Loads the list of orders.
	 */
	public function index()
	{
		$this->set_page_title(_l('orders'));
		$data['orders'] = $this->orders->get_details();
		$data['content']  = $this->load->view('admin/orders/index', $data, TRUE);
		$this->load->view('admin/layouts/index', $data);
	}

	/**
	 * Add new project
	 */
	public function add()
	{
		$this->set_page_title(_l('orders').' | '._l('add'));

		if (!has_permissions('orders', 'create'))
		{
			$this->access_denied('orders', 'create');
		}
		else

		if ($this->input->post())
		{
			$data = array
			(
				'name'        => $this->input->post('name'),
				'description' => $this->input->post('description'),
				'category'    => $this->input->post('category'),
				'price'		  => $this->input->post('price'),
				'type'        => $this->input->post('type'),
				'tag'		  => $this->input->post('tag'),
				'is_active' => 1
			);

			$insert = $this->orders->insert($data);

			if ($insert)
			{
				set_alert('success', _l('_added_successfully', _l('order')));
				log_activity("New order Created [ID:$insert]");
				redirect('admin/orders');
			}
		}
		else
		{
			$data['content'] = $this->load->view('admin/orders/create', '', TRUE);
			$this->load->view('admin/layouts/index', $data);
		}
	}

	public function payment($id = ''){ 
		if(!empty($_POST)){
			$array = array(
				'order_id'=>$id,
				'total_amout_pay_to_driver'=>$this->input->post('amount_driver_system'),
				'total_amount_pay_to_store'=>$this->input->post('amount_res_system'),
				'comment'=>$this->input->post('comment'),
				'confirm_payment_to_driver'=>($this->input->post('con_dri')) ? 1 : 0,
				'confirm_payment_to_store'=>($this->input->post('con_res')) ? 1 : 0,
			);
			$get_order = $this->orders->get_payment_details($id);
			if(!empty($get_order)){
				$array['updated_at']=date('Y-m-d H:i:s');
				$update = $this->orders->update_payment($array);
			} else {
				$array['created_at']=date('Y-m-d H:i:s');
				$update = $this->orders->insert_payment($array);
			}

			if(!empty($this->input->post('amount_driver'))) {
				$driver_array = array(
					'order_ids'=>$this->input->post('dr_order_id'),
					'total_shopping_fees'=>$this->input->post('total_shopping_fee'),
					'actual_amount_to_pay'=>$this->input->post('amount_driver'),
					'is_manual_store_amount'=>1,
					'comment'=>$this->input->post('driver_comment'),
					'confirm_payment'=>($this->input->post('driver_pay_confirm')) ? 1 : 0,
					'is_driver'=>1,
					'driver_store_id'=>$this->input->post('dr_driver_id'),
					'is_testdata'=>1,
				);
				if(!empty($this->input->post('dr_id'))){
					$driver_array['weekly_payment_id'] = $this->input->post('dr_id');
					$driver_array['updated_at']=date('Y-m-d H:i:s');
					$driver_payment = $this->orders->update_driver_payment($driver_array);
				} else {
					$driver_array['created_at']=date('Y-m-d H:i:s');
					$driver_payment = $this->orders->driver_payment($driver_array);
				}
				
			}
			if ($update)
			{
				set_alert('success', 'Payment Confirmed Successfully');
				redirect('admin/orders');
			}
		}
	}

	public function view($id='') { 
		$this->set_page_title(_l('orders').' | '._l('view'));
		$orders =  $this->orders->get_all_orders($id);
		$driver_details = $this->orders->get_driver($id);
		if(!empty($driver_details)){
			$data['driver'] = $driver_details[0];
		}
		$data['order'] = $orders[0];
		if(!empty($orders)) {
			
			// Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
			$ch = curl_init();

			curl_setopt($ch, CURLOPT_URL, 'http://clientapp.narola.online/pg/GoferApp/GoferAppService.php?Service=GetConfirmOrderDetail');
			curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
			curl_setopt($ch, CURLOPT_POST, 1);
			curl_setopt($ch, CURLOPT_POSTFIELDS, "{\n\"secret_key\" : \"FEinhS54sNUNNll0tjqNdzLskf3SPgUISZzp1vIZXzE=\",\n\"access_key\" : \"nousername\",\n\"user_id\" : ".$orders[0]['user_id'].",\n\"order_id\" : ".$id."\n}");

			$headers = array();
			$headers[] = 'Cache-Control: no-cache';
			$headers[] = 'Postman-Token: 1fb5df4e-6a80-ad31-59d5-c6e887f8dd67';
			$headers[] = 'User-Agent: iOS';
			$headers[] = 'Content-Type: application/x-www-form-urlencoded';
			curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

			$result = curl_exec($ch);  
			$result_array = json_decode($result);  
			if (curl_errno($ch)) {
				echo 'Error:' . curl_error($ch);
			} 

			// if(!empty($result_array)){
			// 	$total = $result_array->data->order_billing_details->billing_detail->total_pay;
			// 	$driver = $result_array->data->order_billing_details->billing_detail->service_charge;
			// 	$data['total_order'] = $total;
			// 	$data['driver_total'] = $total - $driver;
			// 	$is_manual = $result_array->data->order_billing_details->billing_detail->is_manual_store_available;
			// 	if($is_manual == 1){
			// 		$data['is_manual_store'] = $is_manual;
			// 		$data['manual_store'] = $result_array->data->order_billing_details->billing_detail->manual_stores;
			// 		$data['shopping_fee'] = $result_array->data->order_billing_details->billing_detail->shopping_fee;
			// 	}
			// }

			$get_pro = $this->orders->get_pro($id);
			$shooping_percentage = $this->orders->get_values();
			if(!empty($shooping_percentage)){
				$data['values'] = $shooping_percentage[0];
			}
			if(!empty($get_pro)) {
				foreach($get_pro as $pro) { 
					if($pro['store_id'] != 0) {
						$get_store = $this->orders->get_store($pro['store_id']); 
						$store_type = 'Registered';
					} else {
						$get_store = $this->orders->get_user_store($pro['user_store_id']); 
						$store_type = 'Manual';
					}
						
						if(!empty($get_store)){
							$data['pro_details']['stores'][$pro['store_id']] = array(
								'store_name'=>$get_store[0]['store_name'],
								'store_address'=>$get_store[0]['store_address'],
								'store_type'=>$store_type
							);
							$get_product = $this->orders->get_product($pro['order_store_id']); 
							if(!empty($get_product)) {
								foreach($get_product as $product) {
									if($product['product_id'] != 0) {
										$get_product_details = $this->orders->get_products_details($product['product_id']);
									} else {
										$get_product_details = $this->orders->get_user_products_details($product['user_product_id']);
									}
										
										if(!empty($get_product_details)) {
											$price = 0;
											if(!empty($get_product_details[0]['product_price'])){
												$price = $get_product_details[0]['product_price'];
											}
											$data['pro_details']['stores'][$pro['store_id']]['store_products'][$product['product_id']]= array(
											  'product_name'=>$get_product_details[0]['product_name'],
											  'product_image'=>$get_product_details[0]['product_image'],
											  'product_price'=>$price,
											  'product_description'=>$get_product_details[0]['product_description'],
											  'qty'=>$product['quantity']
											);
										}
										$get_addons = $this->orders->get_addons($product['order_store_product_id']);
										if(!empty($get_addons)) {
											foreach($get_addons as $addons){
												$data['pro_details']['stores'][$pro['store_id']]['store_products'][$product['product_id']]['addons'][$product['order_store_product_id']] = array(
													'addon_name'=>$addons['addon_name'],
													'addon_price'=>$addons['addon_price']
												);
											} 
										}
								}
							}
						}
					
				} 
			}
		}
		$get_driver_payment = $this->orders->get_driver_payment($id);
		if(!empty($get_driver_payment)){
			$data['driver_payment_data'] = $get_driver_payment;
		}
		$data['content'] = $this->load->view('admin/orders/view', $data, TRUE);
		$this->load->view('admin/layouts/index', $data);
	}

	public function edit($id = '')
	{
		$this->set_page_title(_l('orders').' | '._l('edit'));

		if (!has_permissions('orders', 'edit'))
		{
			$this->access_denied('orders', 'edit');
		}
		else

		if ($id)
		{
			$data['order'] = $this->orders->get($id);

			if ($this->input->post())
			{
				$data = array
					(
					'name'       => $this->input->post('name'),
					'description'=> $this->input->post('description'),
					'category'   => $this->input->post('category'),
					'price'		 => $this->input->post('price'),
					'type'       => $this->input->post('type'),
					'tag'		 => $this->input->post('tag'),
					'is_active' => ($this->input->post('is_active')) ? 1 : 0
				);

				$update = $this->orders->update($id, $data);

				if ($update)
				{
					set_alert('success', _l('_updated_successfully', _l('order')));
					log_activity("order Updated [ID:$id]");
					redirect('admin/orders');
				}
			}
			else
			{
				$data['content'] = $this->load->view('admin/orders/edit', $data, TRUE);
				$this->load->view('admin/layouts/index', $data);
			}
		}
		else
		{
			redirect('admin/orders');
		}
	}

	/**
	 * Deletes the single project record
	 */
	public function delete()
	{
		$project_id = $this->input->post('order_id');
		$deleted    = $this->orders->delete($project_id);

		if ($deleted)
		{
			log_activity("order Deleted");
			echo 'true';
		}
		else
		{
			echo 'false';
		}
	}

	/**
	 * Deletes multiple project records
	 */
	public function delete_selected()
	{
		$where   = $this->input->post('ids');
		$deleted = $this->orders->delete_many($where);

		if ($deleted)
		{
			$ids = implode(',', $where);
			log_activity("orders Deleted");
			echo 'true';
		}
		else
		{
			echo 'false';
		}
	}

	/**
	 * Toggles the user status to Active or Inactive
	 */
	public function update_status()
	{
		$user_id = $this->input->post('user_id');
		$data    = array('is_active' => $this->input->post('is_active'));

		$update = $this->orders->update($user_id, $data);

		if ($update)
		{
			if ($this->input->post('is_active') == 1)
			{
				echo 'true';
			}
			else
			{
				echo 'false';
			}
		}
	}
}
